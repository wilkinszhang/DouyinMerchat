// Code generated by Kitex v0.9.1. DO NOT EDIT.

package stockservice

import (
	stock "DouyinMerchant/api/gen/kitex_gen/douyin_merchant/stock"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"DecreaseStock": kitex.NewMethodInfo(
		decreaseStockHandler,
		newDecreaseStockArgs,
		newDecreaseStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetStock": kitex.NewMethodInfo(
		getStockHandler,
		newGetStockArgs,
		newGetStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"PreReduceStock": kitex.NewMethodInfo(
		preReduceStockHandler,
		newPreReduceStockArgs,
		newPreReduceStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RollbackStock": kitex.NewMethodInfo(
		rollbackStockHandler,
		newRollbackStockArgs,
		newRollbackStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BatchAddStock": kitex.NewMethodInfo(
		batchAddStockHandler,
		newBatchAddStockArgs,
		newBatchAddStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	stockServiceServiceInfo                = NewServiceInfo()
	stockServiceServiceInfoForClient       = NewServiceInfoForClient()
	stockServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return stockServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return stockServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return stockServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "StockService"
	handlerType := (*stock.StockService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "stock",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func decreaseStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(stock.DecreaseStockReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(stock.StockService).DecreaseStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DecreaseStockArgs:
		success, err := handler.(stock.StockService).DecreaseStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DecreaseStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDecreaseStockArgs() interface{} {
	return &DecreaseStockArgs{}
}

func newDecreaseStockResult() interface{} {
	return &DecreaseStockResult{}
}

type DecreaseStockArgs struct {
	Req *stock.DecreaseStockReq
}

func (p *DecreaseStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(stock.DecreaseStockReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DecreaseStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DecreaseStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DecreaseStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DecreaseStockArgs) Unmarshal(in []byte) error {
	msg := new(stock.DecreaseStockReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DecreaseStockArgs_Req_DEFAULT *stock.DecreaseStockReq

func (p *DecreaseStockArgs) GetReq() *stock.DecreaseStockReq {
	if !p.IsSetReq() {
		return DecreaseStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DecreaseStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DecreaseStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DecreaseStockResult struct {
	Success *stock.StockResp
}

var DecreaseStockResult_Success_DEFAULT *stock.StockResp

func (p *DecreaseStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(stock.StockResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DecreaseStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DecreaseStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DecreaseStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DecreaseStockResult) Unmarshal(in []byte) error {
	msg := new(stock.StockResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DecreaseStockResult) GetSuccess() *stock.StockResp {
	if !p.IsSetSuccess() {
		return DecreaseStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DecreaseStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*stock.StockResp)
}

func (p *DecreaseStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DecreaseStockResult) GetResult() interface{} {
	return p.Success
}

func getStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(stock.GetStockReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(stock.StockService).GetStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetStockArgs:
		success, err := handler.(stock.StockService).GetStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetStockArgs() interface{} {
	return &GetStockArgs{}
}

func newGetStockResult() interface{} {
	return &GetStockResult{}
}

type GetStockArgs struct {
	Req *stock.GetStockReq
}

func (p *GetStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(stock.GetStockReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetStockArgs) Unmarshal(in []byte) error {
	msg := new(stock.GetStockReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetStockArgs_Req_DEFAULT *stock.GetStockReq

func (p *GetStockArgs) GetReq() *stock.GetStockReq {
	if !p.IsSetReq() {
		return GetStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetStockResult struct {
	Success *stock.StockResp
}

var GetStockResult_Success_DEFAULT *stock.StockResp

func (p *GetStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(stock.StockResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetStockResult) Unmarshal(in []byte) error {
	msg := new(stock.StockResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetStockResult) GetSuccess() *stock.StockResp {
	if !p.IsSetSuccess() {
		return GetStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*stock.StockResp)
}

func (p *GetStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetStockResult) GetResult() interface{} {
	return p.Success
}

func preReduceStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(stock.PreReduceStockReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(stock.StockService).PreReduceStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PreReduceStockArgs:
		success, err := handler.(stock.StockService).PreReduceStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PreReduceStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPreReduceStockArgs() interface{} {
	return &PreReduceStockArgs{}
}

func newPreReduceStockResult() interface{} {
	return &PreReduceStockResult{}
}

type PreReduceStockArgs struct {
	Req *stock.PreReduceStockReq
}

func (p *PreReduceStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(stock.PreReduceStockReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PreReduceStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PreReduceStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PreReduceStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PreReduceStockArgs) Unmarshal(in []byte) error {
	msg := new(stock.PreReduceStockReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PreReduceStockArgs_Req_DEFAULT *stock.PreReduceStockReq

func (p *PreReduceStockArgs) GetReq() *stock.PreReduceStockReq {
	if !p.IsSetReq() {
		return PreReduceStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PreReduceStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PreReduceStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PreReduceStockResult struct {
	Success *stock.StockResp
}

var PreReduceStockResult_Success_DEFAULT *stock.StockResp

func (p *PreReduceStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(stock.StockResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PreReduceStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PreReduceStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PreReduceStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PreReduceStockResult) Unmarshal(in []byte) error {
	msg := new(stock.StockResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PreReduceStockResult) GetSuccess() *stock.StockResp {
	if !p.IsSetSuccess() {
		return PreReduceStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PreReduceStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*stock.StockResp)
}

func (p *PreReduceStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PreReduceStockResult) GetResult() interface{} {
	return p.Success
}

func rollbackStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(stock.RollbackStockReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(stock.StockService).RollbackStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RollbackStockArgs:
		success, err := handler.(stock.StockService).RollbackStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RollbackStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRollbackStockArgs() interface{} {
	return &RollbackStockArgs{}
}

func newRollbackStockResult() interface{} {
	return &RollbackStockResult{}
}

type RollbackStockArgs struct {
	Req *stock.RollbackStockReq
}

func (p *RollbackStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(stock.RollbackStockReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RollbackStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RollbackStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RollbackStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RollbackStockArgs) Unmarshal(in []byte) error {
	msg := new(stock.RollbackStockReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RollbackStockArgs_Req_DEFAULT *stock.RollbackStockReq

func (p *RollbackStockArgs) GetReq() *stock.RollbackStockReq {
	if !p.IsSetReq() {
		return RollbackStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RollbackStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RollbackStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RollbackStockResult struct {
	Success *stock.StockResp
}

var RollbackStockResult_Success_DEFAULT *stock.StockResp

func (p *RollbackStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(stock.StockResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RollbackStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RollbackStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RollbackStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RollbackStockResult) Unmarshal(in []byte) error {
	msg := new(stock.StockResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RollbackStockResult) GetSuccess() *stock.StockResp {
	if !p.IsSetSuccess() {
		return RollbackStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RollbackStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*stock.StockResp)
}

func (p *RollbackStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RollbackStockResult) GetResult() interface{} {
	return p.Success
}

func batchAddStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(stock.BatchAddStockReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(stock.StockService).BatchAddStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BatchAddStockArgs:
		success, err := handler.(stock.StockService).BatchAddStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BatchAddStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBatchAddStockArgs() interface{} {
	return &BatchAddStockArgs{}
}

func newBatchAddStockResult() interface{} {
	return &BatchAddStockResult{}
}

type BatchAddStockArgs struct {
	Req *stock.BatchAddStockReq
}

func (p *BatchAddStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(stock.BatchAddStockReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BatchAddStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BatchAddStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BatchAddStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BatchAddStockArgs) Unmarshal(in []byte) error {
	msg := new(stock.BatchAddStockReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BatchAddStockArgs_Req_DEFAULT *stock.BatchAddStockReq

func (p *BatchAddStockArgs) GetReq() *stock.BatchAddStockReq {
	if !p.IsSetReq() {
		return BatchAddStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BatchAddStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BatchAddStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BatchAddStockResult struct {
	Success *stock.StockResp
}

var BatchAddStockResult_Success_DEFAULT *stock.StockResp

func (p *BatchAddStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(stock.StockResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BatchAddStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BatchAddStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BatchAddStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BatchAddStockResult) Unmarshal(in []byte) error {
	msg := new(stock.StockResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BatchAddStockResult) GetSuccess() *stock.StockResp {
	if !p.IsSetSuccess() {
		return BatchAddStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BatchAddStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*stock.StockResp)
}

func (p *BatchAddStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BatchAddStockResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DecreaseStock(ctx context.Context, Req *stock.DecreaseStockReq) (r *stock.StockResp, err error) {
	var _args DecreaseStockArgs
	_args.Req = Req
	var _result DecreaseStockResult
	if err = p.c.Call(ctx, "DecreaseStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetStock(ctx context.Context, Req *stock.GetStockReq) (r *stock.StockResp, err error) {
	var _args GetStockArgs
	_args.Req = Req
	var _result GetStockResult
	if err = p.c.Call(ctx, "GetStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PreReduceStock(ctx context.Context, Req *stock.PreReduceStockReq) (r *stock.StockResp, err error) {
	var _args PreReduceStockArgs
	_args.Req = Req
	var _result PreReduceStockResult
	if err = p.c.Call(ctx, "PreReduceStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RollbackStock(ctx context.Context, Req *stock.RollbackStockReq) (r *stock.StockResp, err error) {
	var _args RollbackStockArgs
	_args.Req = Req
	var _result RollbackStockResult
	if err = p.c.Call(ctx, "RollbackStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchAddStock(ctx context.Context, Req *stock.BatchAddStockReq) (r *stock.StockResp, err error) {
	var _args BatchAddStockArgs
	_args.Req = Req
	var _result BatchAddStockResult
	if err = p.c.Call(ctx, "BatchAddStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
